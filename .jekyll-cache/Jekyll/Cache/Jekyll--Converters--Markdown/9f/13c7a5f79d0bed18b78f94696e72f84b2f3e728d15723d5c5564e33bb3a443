I"f<h2 id="introduction">Introduction</h2>
<p>Nagios is one legacy program among many, many more polished open source monitoring programs.  In its free form, it’s not what anyone would choose in a large, complex environment.  Still, for single site, small-ish networks (say, less than 100 devices) it’s easy to set up, doesn’t require a lot of resources, and is extremely flexible.</p>

<h2 id="goals">Goals</h2>
<p>In this tutorial, you will see how to:</p>
<ul>
  <li>Install Nagios from source</li>
  <li>Configure the Apache server (and PHP) to serve the Nagios web interface</li>
  <li>Edit the Nagios configuration files to start simple up/down monitoring of your network</li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>
<p>Part of the purpose of this tutorial is to show that you can do something useful on your home/small network using a Raspberry Pi.  If you follow along with this you will accomplish that goal.  I’ve also checked the tutorial against an Ubuntu Server installation using very minimal resources.  If you want a more production ready installation you can allocate real or virtual resources to that.</p>

<h3 id="raspberry-pi">Raspberry Pi</h3>
<p>I’m running this installation on a Model B Plus Rev 1.2 Raspberry Pi with a 64GB SD card.  I’m guessing a little less would work and a little more would get the job done too.</p>

<h3 id="or-virtual-resources">or Virtual Resources</h3>
<p>I’ve also tested this on fairly minimal virtual resources.  Specifically a Hyper-V instance with a single CPU, 1GB of memory and 40GB of hard drive space.  The virtualization platform you choose should matter little and more resources wouldn’t hurt.</p>

<h3 id="raspbian-installation">Raspbian Installation</h3>
<p>I’m running the 2018-11-13 Stretch Lite version Of Raspbian.  The remainder of the configuration options aren’t important (other than getting it onto your network) but you’ll probably be well served by configuring an SSH connection to do the set up and future management.</p>

<h3 id="or-ubuntu-installation">or Ubuntu Installation</h3>
<p>I’ve also tested this with an installation of Ubuntu Server 18.04.2 running on Hyper-V.  Just a basic installation, no additional software only OpenSSH.</p>

<h3 id="either-os">Either OS</h3>
<p>Make sure you’ve upgraded your installation before starting by doing the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt-get update
<span class="nv">$ </span><span class="nb">sudo </span>apt-get upgrade
</code></pre></div></div>

<p>Let’s get started then.</p>

<h2 id="tutorial">Tutorial</h2>
<p>We’ll do a simple install of Nagios to get you started doing some simple monitoring.  Simply:</p>

<ul>
  <li>Step One- Install Pre-Requisite Packages</li>
  <li>Step Two- Create Users and Groups</li>
  <li>Step Three- Install Nagios Core and Web Interface</li>
  <li>Step Four- Install Nagios Plug-ins</li>
  <li>Step Five- Set Up Nagios as a Service</li>
  <li>Step Six- Configure Simple Monitoring</li>
</ul>

<h3 id="step-1--installing-pre-requisite-packages">Step 1- Installing Pre-Requisite Packages</h3>
<p>To display the Nagios Web Interface you will need to install Apacha and PHP.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>apache2 libapache2-mod-php7.0 php7.0
</code></pre></div></div>

<blockquote>
  <p><strong>For Ubuntu</strong> use <code class="highlighter-rouge">sudo apt-install apache 2 liapache2-mod-php php7.0 build-essential</code> instead.</p>
</blockquote>

<blockquote>
  <p><strong>Note:</strong> If you want to see if these packages are installed already use the <code class="highlighter-rouge">apt list --installed</code> command.</p>
</blockquote>

<p>After installing these packages, configure <code class="highlighter-rouge">php</code>.</p>

<p>Set the <code class="highlighter-rouge">php</code> timezone:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nano /etc/php/7.0/apache2/php.ini
</code></pre></div></div>
<blockquote>
  <p><strong>For Ubuntu</strong> use <code class="highlighter-rouge">sudo nano /etc/php/7.2/apache2/php.ini</code></p>
</blockquote>

<p>Change;</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>;date.timezone = 
</code></pre></div></div>
<p>to</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Date.timezone = &lt;appropriate variable&gt;
</code></pre></div></div>

<p>Like such:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/setPHPDate.png" alt="Change PHP date setting" /></p>

<blockquote>
  <p><strong>Note:</strong> use the list here to find your appropriate variable: http://php.net/manual/en/timezones.america.php</p>
</blockquote>

<p>Save your changes.</p>

<p>Create a <code class="highlighter-rouge">php.info</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo echo</span> <span class="s1">'&lt;?php phpinfo(): ?&gt;'</span> | <span class="nb">tee</span> /var/www/html/info.php
</code></pre></div></div>

<blockquote>
  <p><strong>For Ubuntu</strong> <code class="highlighter-rouge">sudo echo '&lt;?php phpinfo(): ?&gt;' | sudo tee /var/www/html/info.php</code></p>
</blockquote>

<p>Now, enable a couple of Apache Modules</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>a2enmod rewrite
<span class="nv">$ </span><span class="nb">sudo </span>a2enmod cgi
</code></pre></div></div>

<p>Both commands will inform you that the <code class="highlighter-rouge">apache2</code> service needs to be restarted.</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/enableApacheModules.png" alt="Change PHP date setting" /></p>

<p>Let’s follow that advice and restart <code class="highlighter-rouge">apache2</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>systemctl restart apache2
</code></pre></div></div>

<p>Test that Apache is running:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>netstat <span class="nt">-tlpn</span>
</code></pre></div></div>

<p>You should see something similar to this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/testApacheNetstat.png" alt="image" /></p>

<p>Which shows that <code class="highlighter-rouge">apache2</code> is listening for web requests at port 80.</p>

<p>You can also go to <code class="highlighter-rouge">http://&lt;your machine name or IP&gt;</code> and see something like this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/testApacheBrowser.png" alt="image" /></p>

<p>Which shows that <code class="highlighter-rouge">apache2</code> “works!”.</p>

<p>Test your <code class="highlighter-rouge">php</code> configuration.  Open a web browser and navigate to <code class="highlighter-rouge">http:&lt;machine ip&gt;/info.php</code> and scroll down to the <strong>Default timezone</strong> setting and confirm.</p>

<p>You should see the time zone you configured like:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/testPhpDate.png" alt="image" /></p>

<p>Cool, you’re serving up PHP pages on Apache.  Let’s get into the Nagios stuff.</p>

<h3 id="step-2--create-users-and-groups">Step 2- Create Users and Groups</h3>

<p>The Nagios program needs a user to run as.  Create the user by:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>useradd <span class="nt">-m</span> nagios
</code></pre></div></div>
<p>Then set a password for the user:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>passwd nagios
</code></pre></div></div>

<p>You will set and confirm the password like this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/setNagiosUserPassword.png" alt="image" /></p>

<p>Now, set up a group <code class="highlighter-rouge">nagcmd</code> that you can give some rights to:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>groupadd nagcmd
</code></pre></div></div>

<p>Now add the <code class="highlighter-rouge">nagios</code> user you created to the group so that it gets those rights:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>usermod <span class="nt">-a</span> <span class="nt">-G</span> nagcmd nagios
</code></pre></div></div>

<p>Also add the <code class="highlighter-rouge">www-data</code> user to that group.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>usermod <span class="nt">-a</span> <span class="nt">-G</span> nagcmd www-data
</code></pre></div></div>

<p>You’ve got a <code class="highlighter-rouge">nagios</code> user account waiting to do some work.  Let’s install Nagios to give her a place to do that.</p>

<h3 id="step-3--install-nagios-core-and-web-interface">Step 3- Install Nagios Core and Web Interface</h3>

<p>We’re going to download the latest version of Nagios Core and install it from source.</p>

<p>Change into the home directory and get the latest version (4.4.3 as of this writing) of Nagios Core:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~
<span class="nv">$ </span><span class="nb">sudo </span>wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.4.3.tar.gz
</code></pre></div></div>
<blockquote>
  <p><strong>Note:</strong> Check that url in a web browser…from time to time it changes.</p>
</blockquote>

<p>You’ll see the progress of the download:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/getnagiosCoreSource.png" alt="image" /></p>

<p>Once it is all downloaded, unpack the files:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo tar </span>zxvf nagios-4.4.3.tar.gz
</code></pre></div></div>

<p>Let’s start building Nagios.  First confiugre the source code:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>nagios-4.4.3
<span class="nv">$ </span><span class="nb">sudo</span> ./configure <span class="nt">--with-command-group</span><span class="o">=</span>nagcmd
</code></pre></div></div>
<p>Using Raspbian (less so with Ubuntu/Hyper-V), this will take some time, and you’ll see a lot of this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/configureNagiosCoreProgress.png" alt="image" /></p>

<p>Wrapping up with something like this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/configureNagiosCoreComplete.png" alt="image" /></p>

<p>Now we’ve got configured the Nagios Core source.  Let’s get to the compiling:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>make all
</code></pre></div></div>

<p>Now if you’re doing this on the Pi, you’re going to have some time while it cranks through the work like this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/makeNagiosCoreProgress.png" alt="image" /></p>

<p>The <code class="highlighter-rouge">make</code> command you issued is creating the Nagios Core executables, libraries, directories, etc.  When the process wraps, you’ll see something like this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/makeNagiosCoreComplete.png" alt="image" /></p>

<p>So enjoy, but not for too long because there’s a lot of installing left to be done.</p>

<p>These steps will install and configure the binaries, documentation, web interface, external command directory, init script, sample configuration files and the web interface.</p>

<p>Get with the make-ing.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>make <span class="nb">install</span>
<span class="nv">$ </span><span class="nb">sudo </span>make install-commandmode
<span class="nv">$ </span><span class="nb">sudo </span>make install-init
<span class="nv">$ </span><span class="nb">sudo </span>make install-config
<span class="nv">$ </span><span class="nb">sudo </span>make install-webconf
</code></pre></div></div>

<p>Now, install the configuration file to the correct Apache directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo install</span> <span class="nt">-c</span> <span class="nt">-m</span> 644 sample-config/httpd.conf /etc/apache2/sites-enabled/nagios.conf 
</code></pre></div></div>

<p>Finally, let’s set a password for the Nagios Admin (<code class="highlighter-rouge">nagiosadmin</code>) user that you will use to log into the web interface.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>htpasswd <span class="nt">-c</span> /usr/local/nagios/etc/htpasswd.users nagiosadmin
</code></pre></div></div>
<p>This command will present you with a familiar set/confirm password process.</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/setNagiosAdminPassword.png" alt="image" /></p>

<p>Let’s bounce Apache.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>systemctl restart apache2
</code></pre></div></div>

<p>Start up Nagios
First, let’s make sure everything is cool with the Nagios configuration.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> /usr/local/nagios/bin/nagios <span class="nt">-v</span> /usr/local/nagios/etc/nagios.cfg
</code></pre></div></div>
<p>Then, let’s start up the Nagios program.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">sudo</span> /usr/local/nagios/bin/nagios <span class="nt">-d</span> /usr/local/nagios/etc/nagios.cfg
</code></pre></div></div>

<p>We will make that easier in a couple of steps.  Meantime, test your work by pointing a web browser at <code class="highlighter-rouge">http://&lt;machine name or IP&gt;/nagios</code>.  You’ll get an authentication prompt:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/testNagiosWebInterface.png" alt="image" /></p>

<p>After successfully authenticating you will see this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/testNagiosWebInterfaceSuccess.png" alt="image" /></p>

<p>We’ve got everything we need to do simple monitoring.  Let’s do a little get-ahead work in the next step and install Nagios Plugins then do a little work to make Nagios start as a service.</p>

<h3 id="step-4--install-the-nagios-plugins">Step 4- Install the Nagios Plugins</h3>

<p>There is a set of Plugins maintained that will let you do more than simple up-down monitoring.  While we won’t configure anything more than up-down monitors in this tutorial, we will install the plugins for future use.  Let’s get the current version of the Nagios Plugins:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~
<span class="nv">$ </span><span class="nb">sudo </span>wget https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz
</code></pre></div></div>

<p>Now, extract the compressed files.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo tar </span>zxvf nagios-plugins-2.2.1.tar.gz
</code></pre></div></div>

<p>Next roll through the Plugin install process.  Configure.  Compile.  Install.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~
<span class="nv">$ </span><span class="nb">cd </span>nagios-plugins-2.2.1
<span class="nv">$ </span><span class="nb">sudo</span> ./configure <span class="nt">--with-nagios-user</span><span class="o">=</span>nagios <span class="nt">--with-nagios-group</span><span class="o">=</span>nagcmd
<span class="nv">$ </span><span class="nb">sudo </span>make
<span class="nv">$ </span><span class="nb">sudo </span>make <span class="nb">install</span>
</code></pre></div></div>
<blockquote>
  <p><strong>Warning:</strong> On Raspbian, both the <code class="highlighter-rouge">configure</code> and <code class="highlighter-rouge">make</code> command will take some time.</p>
</blockquote>

<p>That installs your plug-ins.  We won’t use them right out of the chute, but they will allow you to do some very complex monitoring and alerting later on.  The next thing we will want to do is set up the Nagios Core as a service.</p>

<h3 id="step-5--set-up-nagios-as-a-service">Step 5- Set Up Nagios as a Service</h3>

<p>You (obviously?) want Nagios to be running more or less continuously.  This is a simple process.  Create a dynamic link from <code class="highlighter-rouge">nagios</code> in the <code class="highlighter-rouge">init.d</code> directory to the <code class="highlighter-rouge">rcS.d</code> directory</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/init.d/nagios /etc/rc5.d/nagios
</code></pre></div></div>

<p>Now, let’s start up Nagios as a service for the first time.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> /etc/init.d/nagios start
<span class="nv">$ </span><span class="nb">sudo </span>service nagios start
</code></pre></div></div>

<p>If you go back to the web interface (`http://<machine name="" or="" IP="">/nagios') and look at the menu on the left side you will see a **Current Status** section.</machine></p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/nagiosWebInterfaceMenu.png" alt="image" /></p>

<p>Click on the <strong>Hosts</strong> selection.</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/nagiosWebInterfaceLocalhostStatus.png" alt="image" /></p>

<p>This is the status of the machine/instance that Nagios is running on.  Interesting, but not super useful.  In the next step we’ll make some modifications to Nagios config files so that you’re monitoring more hosts on your network.</p>

<h3 id="step-6--configure-simple-monitoring">Step 6- Configure Simple Monitoring</h3>
<p>Seems like a good time to make Nagios do some work for you after all you’ve done to bring it to life.  Let’s configure Nagios to monitor some of your hosts.  First, change the <code class="highlighter-rouge">nagios.cfg</code> file to use a file with information about your hosts.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /usr/local/nagios/etc
<span class="nv">$ </span><span class="nb">sudo </span>nano nagios.cfg
</code></pre></div></div>
<p>Scroll down and find the section titled <code class="highlighter-rouge">#OBJECT CONFIGURATION FILE(S)</code>, then add a line like <code class="highlighter-rouge">cfg_file=/usr/local/nagios/objects/&lt;descriptive name&gt;.cfg</code> similar to this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/updateNagiosConfigFile.png" alt="image" /></p>

<blockquote>
  <p><strong>Note:</strong> You can add a comment in any of the Nagios config files by preceding the line with a <code class="highlighter-rouge">#</code>.  Remember, comments win wars.</p>
</blockquote>

<p>Now create a host file that’s named and located where you told the <code class="highlighter-rouge">nagios.cfg</code> file it would be.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /usr/local/nagios/etc/objects
<span class="nv">$ </span><span class="nb">sudo </span>nano &lt;descriptive name you specified&gt;.cfg
</code></pre></div></div>

<p>In the file, create as many host definitions as you like.  Again, this is for really simple monitoring right now so we’re going to do the simplest configuration.  The format for the host definitions is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>define host {
        use                             linux-server;
        host_name                       **&lt;yourhost&gt;**;
        alias                           **&lt;Display Name&gt;**;
        address                         **&lt;host IP Address&gt;**;
		max_check_attempts				10;
}
</code></pre></div></div>

<p>Here’s an example:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/sampleNagiosHostObject.png" alt="image" /></p>

<p>The <code class="highlighter-rouge">host_name</code> is the fully qualified domain name of the host.  In the <code class="highlighter-rouge">alias</code> field you can put a more firendly name.  Here I used the host name and the service that runs on it.  Lastly, the <code class="highlighter-rouge">address</code> field is the IP address of the host you are monitoring.</p>

<blockquote>
  <p><strong>Note:</strong> Technically, you only need either a <code class="highlighter-rouge">host_name</code> or a <code class="highlighter-rouge">address</code> specified.</p>
</blockquote>

<p>Save up the file.  Nagios won’t use the new configurations until you reload the service.  You can do it like this.  First check the configuration:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> /usr/local/nagios/bin/nagios <span class="nt">-v</span> /usr/local/nagios/etc/nagios.cfg
</code></pre></div></div>

<p>You should see something like this (depending on how many hosts you defined):</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/startNagiosUserPassword.png" alt="image" /></p>

<p>Now, restart Nagios:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>service nagios restart
</code></pre></div></div>

<p>Open up the web interface and go to the <strong>Hosts</strong> selection in the <strong>Current Status</strong> section.  You should see:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/newHostPending.png" alt="image" /></p>

<p>The <strong>Status</strong> will show <strong>PENDING</strong> until the check runs.  You can see when that will be in the <strong>Status Information</strong> column.  Once that check happens, you should see the status change to something like this:</p>

<p><img src="http://localhost:4000/assets/2019-03-09-install-nagios-raspbian/newHostUp.png" alt="image" /></p>

<p>And that’s it (for now), you’ve got up/down monitoring for as many hosts as you want to add.</p>

<h2 id="conclusion">Conclusion</h2>
<p>End result, you should have simple monitoring for your network.  That’s great, but it’s simple.  There’s a lot more monitoring <strong>and</strong> alerting that Nagios can do for you.  Checking more services than just <code class="highlighter-rouge">ping</code>, e-mail alerts, grouping hosts into groups, storing historical data is all possible.  I’ve just got to spend some time setting it up and (of course) writing it down.</p>

<h3 id="what-to-do-next">What to do next</h3>
<ul>
  <li>The next logical step is to make Nagios send you e-mail alerts.  Here’s the tutorial for that: https://http://localhost:4000/_posts/20019-03-09-install-postfix-nagios.html</li>
</ul>

<h3 id="resources">Resources</h3>
<ul>
  <li>Official Nagios Core Documentation https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/4/en/toc.html</li>
  <li>https://www.digitalocean.com/community/tutorials/how-to-install-nagios-4-and-monitor-your-servers-on-centos-7</li>
  <li>http://www.d3noob.org/2016/04/installing-nagios-4-on-raspberry-pi.html</li>
  <li>https://poweruphosting.com/blog/install-nagios/</li>
</ul>

<h3 id="revision-history">Revision History</h3>
<ul>
  <li>03/09/2019- Writing begins</li>
  <li>06/06/2019- Content review</li>
  <li>06/06/2019- Style Guide review</li>
  <li>06/06/2019- Published</li>
</ul>
:ET